[gd_scene load_steps=6 format=3 uid="uid://c4vibdgqa8u7n"]

[ext_resource type="PackedScene" uid="uid://f2q4l46jsk8c" path="res://Assets/World/World.tscn" id="1_2x3n4"]
[ext_resource type="PackedScene" uid="uid://c30k8cxuia6f5" path="res://Assets/Interface/Dialogue.tscn" id="2_3q4bn"]
[ext_resource type="PackedScene" uid="uid://b82mukv4f8x8b" path="res://Assets/Interface/BattleUI.tscn" id="2_q2r2a"]
[ext_resource type="Script" path="res://Assets/Scripts/BattleIntegration.cs" id="3_30s8j"]

[sub_resource type="CSharpScript" id="CSharpScript_3q4bn"]
script/source = "// BattleManager.cs - Basic move logic with camera control and tile validation
using Godot;
using System.Linq;

public partial class BattleManager : Node
{
    private HexGrid hexGrid;
    private MenuControls menuControls;
    private HexControls hexControls;
    
    private Vector2I playerPosition = new Vector2I(0, 0);
    private Vector2I enemyPosition = new Vector2I(3, 0);
    private bool awaitingMovement = false;
    
    public override void _Ready()
    {
        DisableInputManager();
        FindNodes();
        
        if (hexGrid != null && menuControls != null && hexControls != null)
        {
            SetupInitialState();
            SetupEntities();
            ConnectSignals();
            StartPlayerTurn();
        }
        else
        {
            GD.PrintErr(\"[Battle] Failed to find required nodes\");
        }
    }
    
    private void DisableInputManager()
    {
        var inputManager = GetViewport().GetChildren().OfType<CentralInputManager>().FirstOrDefault();
        if (inputManager != null)
        {
            inputManager.ProcessMode = Node.ProcessModeEnum.Disabled;
            GD.Print(\"[Battle] Disabled CentralInputManager\");
        }
    }
    
    private void FindNodes()
    {
        // Find HexGrid
        hexGrid = GetNode<HexGrid>(\"../HexGrid\");
        if (hexGrid != null)
        {
            GD.Print(\"[Battle] Found HexGrid\");
        }
        else
        {
            GD.PrintErr(\"[Battle] HexGrid not found at ../HexGrid\");
        }
        
        // Find HexControls
        hexControls = hexGrid?.GetNodeOrNull<HexControls>(\"HexControls\");
        if (hexControls != null)
        {
            GD.Print(\"[Battle] Found HexControls\");
        }
        else
        {
            GD.PrintErr(\"[Battle] HexControls not found\");
        }
        
        // Find MenuControls by searching the tree
        menuControls = FindMenuControlsInTree(GetTree().CurrentScene);
        if (menuControls != null)
        {
            GD.Print($\"[Battle] Found MenuControls on node: {menuControls.Name}\");
        }
        else
        {
            GD.PrintErr(\"[Battle] MenuControls not found anywhere in scene tree\");
        }
    }
    
    private MenuControls FindMenuControlsInTree(Node node)
    {
        if (node is MenuControls mc)
            return mc;
            
        foreach (Node child in node.GetChildren())
        {
            var result = FindMenuControlsInTree(child);
            if (result != null)
                return result;
        }
        
        return null;
    }
    
    private void SetupInitialState()
    {
        // Step 1: Camera locked, UI only
        if (hexControls != null)
        {
            hexControls.StartUIOnlyMode(playerPosition);
        }
        
        GD.Print(\"[Battle] Step 1: Camera locked, UI only mode\");
    }
    
    private void SetupEntities()
    {
        GD.Print(\"[Battle] Setting up entities...\");
        
        try
        {
            // Place player entity (id=0, yellow)
            hexGrid.SetTile(playerPosition, CellLayer.Entity, 0);
            hexGrid.SetOccupied(playerPosition);
            GD.Print($\"[Battle] Player (yellow) placed at {playerPosition}\");
            
            // Place enemy entity (id=1, blue)
            hexGrid.SetTile(enemyPosition, CellLayer.Entity, 1);
            hexGrid.SetOccupied(enemyPosition);
            GD.Print($\"[Battle] Enemy (blue) placed at {enemyPosition}\");
            
            // Focus camera on player
            if (hexControls != null)
            {
                hexControls.FocusOnPosition(playerPosition);
            }
        }
        catch (System.Exception e)
        {
            GD.PrintErr($\"[Battle] Failed to place entities: {e.Message}\");
        }
    }
    
    private void ConnectSignals()
    {
        if (menuControls != null)
        {
            menuControls.ButtonActivated += OnButtonPressed;
            GD.Print(\"[Battle] Connected to MenuControls.ButtonActivated\");
        }
        else
        {
            GD.PrintErr(\"[Battle] MenuControls is null, cannot connect signal\");
        }
            
        if (hexGrid != null)
        {
            hexGrid.CellSelected += OnCellSelected;
            GD.Print(\"[Battle] Connected to HexGrid.CellSelected\");
        }
        else
        {
            GD.PrintErr(\"[Battle] HexGrid is null, cannot connect signal\");
        }
    }
    
    private void StartPlayerTurn()
    {
        menuControls.SetActive(true);
        GD.Print(\"[Battle] Player turn started - camera locked, UI only\");
    }
    
    private void OnButtonPressed(int index, BaseButton button)
    {
        GD.Print($\"[Battle] Button {index} pressed: {button.Name}\");
        GD.Print($\"[Battle] Menu controls active: {menuControls.IsActive}\");
        GD.Print($\"[Battle] Awaiting movement: {awaitingMovement}\");
        
        menuControls.SetActive(false);
        
        switch (index)
        {
            case 0: // Move button
                GD.Print(\"[Battle] Move button detected, calling StartMovement\");
                StartMovement();
                break;
            default:
                GD.Print($\"[Battle] Action {index} not implemented\");
                StartPlayerTurn();
                break;
        }
    }
    
    private void StartMovement()
    {
        GD.Print(\"[Battle] Step 2: Player selected MOVE\");
        
        awaitingMovement = true;
        
        // Step 3: Highlight tiles around player with id=1 (blue arrow)
        var moveRange = hexGrid.GetReachable(playerPosition, 2);
        GD.Print($\"[Battle] Move range calculation: {moveRange.Count} total tiles\");
        
        int highlightCount = 0;
        foreach (var cell in moveRange)
        {
            if (cell != playerPosition) // Don't highlight current position
            {
                hexGrid.SetTile(cell, CellLayer.Cursor, 1); // id=1 blue arrow
                highlightCount++;
                GD.Print($\"[Battle] Highlighted tile: {cell}\");
            }
        }
        
        GD.Print($\"[Battle] Step 3: Highlighted {highlightCount} tiles with blue arrows (id=1)\");
        
        // Step 4: Enable free camera mode
        if (hexControls != null)
        {
            hexControls.EnterMovementMode();
        }
        
        GD.Print(\"[Battle] Step 4: Free camera mode enabled\");
    }
    
    private void OnCellSelected(Vector2I cell)
    {
        if (!awaitingMovement)
        {
            GD.Print($\"[Battle] Cell clicked but not awaiting movement: {cell}\");
            return;
        }
        
        GD.Print($\"[Battle] Step 5: Cell selected: {cell}\");
        
        // Check if tile is in movement range
        var moveRange = hexGrid.GetReachable(playerPosition, 2);
        bool inRange = moveRange.Contains(cell) && cell != playerPosition;
        
        if (!inRange)
        {
            GD.Print($\"[Battle] Cell {cell} out of range, ignoring\");
            return;
        }
        
        // Step 5: Show red if invalid, green if valid
        bool isValid = hexGrid.IsWalkable(cell);
        
        if (isValid)
        {
            // Green tile (id=2)
            hexGrid.SetTile(cell, CellLayer.Cursor, 2);
            GD.Print($\"[Battle] Step 5: Tile {cell} marked GREEN (valid move)\");
            
            // Wait for second click to confirm move
            CallDeferred(nameof(ConfirmMove), cell);
        }
        else
        {
            // Red tile (id=4)
            hexGrid.SetTile(cell, CellLayer.Cursor, 4);
            GD.Print($\"[Battle] Step 5: Tile {cell} marked RED (invalid - occupied/blocked)\");
        }
    }
    
    private void ConfirmMove(Vector2I targetCell)
    {
        // Wait a brief moment, then check if same tile clicked again
        GD.Print($\"[Battle] Waiting for confirmation click on {targetCell}...\");
        
        // For now, auto-confirm after showing green
        var timer = GetTree().CreateTimer(0.5);
        timer.Timeout += () => ExecuteMove(targetCell);
    }
    
    private void ExecuteMove(Vector2I newPosition)
    {
        GD.Print($\"[Battle] Step 6: Executing move from {playerPosition} to {newPosition}\");
        
        // Clear old player position
        hexGrid.ClearTile(playerPosition, CellLayer.Entity);
        hexGrid.SetOccupied(playerPosition, false);
        
        // Update data and move player
        playerPosition = newPosition;
        hexGrid.SetTile(playerPosition, CellLayer.Entity, 0); // id=0 yellow
        hexGrid.SetOccupied(playerPosition);
        
        GD.Print($\"[Battle] Step 6: Player data updated, moved to {playerPosition}\");
        
        // Clear all highlights
        hexGrid.Clear();
        
        // Return to locked camera mode
        if (hexControls != null)
        {
            hexControls.ExitMovementMode(playerPosition);
        }
        
        awaitingMovement = false;
        GD.Print(\"[Battle] Move completed, returning to UI-only mode\");
        
        // Show menu again
        StartPlayerTurn();
    }
}"

[node name="TestBattle" type="Node2D"]
position = Vector2(10, 0)

[node name="CentralInputManager" type="CanvasLayer" parent="."]
script = SubResource("CSharpScript_3q4bn")
cursorOffset = null
enableCursor = null
cursorSmoothness = null

[node name="World" parent="." instance=ExtResource("1_2x3n4")]
position = Vector2(0, 1)

[node name="BattleIntegration" type="Node2D" parent="."]
script = ExtResource("3_30s8j")
hexGridPath = NodePath("../World")
inputManagerPath = NodePath("../CentralInputManager")
infoDisplayPath = NodePath("../UI/Battle")

[node name="UI" type="Control" parent="."]
layout_mode = 3
anchors_preset = 0
offset_right = 40.0
offset_bottom = 40.0

[node name="Battle" parent="UI" instance=ExtResource("2_q2r2a")]

[node name="Dialogue" parent="UI" instance=ExtResource("2_3q4bn")]
visible = false
